package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BasicRepositoryImpl<T> {
    protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
    protected String name;

    public BasicRepositoryImpl(String name) {
        this.name = name;
    }

    protected abstract T toCreate(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;

    public T findBy(Object... parameters) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String sql = makeSelectStatement(parameters);
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                for (int i = 0; i < parameters.length; i+=2) {
                    if (parameters[i].toString().toLowerCase().endsWith("id")) {
                        statement.setLong(i / 2 + 1, (Long) parameters[i + 1]);
                    } else {
                        statement.setString(i / 2 + 1, (String) parameters[i + 1]);
                    }
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toCreate(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + name + ".", e);
        }
    }

    public List<T> findAll() {
        List<T> result = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + name + " ORDER BY id DESC")) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    T t;
                    while ((t = toCreate(statement.getMetaData(), resultSet)) != null) {
                        result.add(t);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + name + ".", e);
        }
        return result;
    }

    public long findCount() {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT COUNT(*) FROM " + name)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    resultSet.next();
                    return resultSet.getLong(1);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + name + ".", e);
        }
    }

    public void save(Object... parameters) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String sql = makeInsertStatement(parameters);
            try (PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                int ind = 1;
                for (int i = 0; i < parameters.length; i+=2) {
                    if (parameters[i].toString().toLowerCase().endsWith("id")) {
                        statement.setLong(ind++, (Long) parameters[i + 1]);
                    } else if (!parameters[i].toString().equals("creationTime")){
                        statement.setString(ind++, (String) parameters[i + 1]);
                    }
                }
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + name + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (!generatedKeys.next()) {
                        throw new RepositoryException("Can't save " + name + " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + name +".", e);
        }
    }

    private String makeSelectStatement(Object[] parameters) {
        StringBuilder statement = new StringBuilder("SELECT * FROM ").append(name).append(" WHERE ").append(parameters[0]).append("=?");
        for (int i = 2; i < parameters.length; i+=2) {
            statement.append(" AND ").append(parameters[i]).append("=?");
        }
        return statement.toString();
    }

    private String makeInsertStatement(Object[] parameters) {
        StringBuilder statement = new StringBuilder("INSERT INTO ").append(name);
        statement.append(" (").append(parameters[0]);
        for (int i = 2; i < parameters.length; i+=2) {
            statement.append(", ").append(parameters[i]);
        }
        statement.append(") VALUES (?");
        for (int i = 2; i < parameters.length; i+=2) {
            if (parameters[i].equals("creationTime")) {
                statement.append(", NOW()");
            } else {
                statement.append(", ?");
            }
        }
        statement.append(")");
        return statement.toString();
    }
}
